#! /bin/bash
###############################################
##
##  Copyright (2020, ) Institute of Software
##      Chinese Academy of Sciences
##          wuheng@iscas.ac.cn
##
###############################################


VERSION="1.6"

###############################################
##
##  System Config, you can modify it
##
###############################################

########      You can modify them      ########

# Required
kube_pod_subnet="10.244.0.0/16"
kube_version="1.20.10"
kube_image_server="registry.cn-hangzhou.aliyuncs.com/google_containers"

## version
kube_backend_version="2.0.2"
kube_frontend_version="2.0.2"

# Optional
#fip="119.8.188.235"
fip=""

# Kubernetes >= 1.22, containerd would be better
#cnt_type="containerd"
cnt_type="docker"

network="https://docs.projectcalico.org/archive/v3.19/manifests/calico.yaml"

########    Do not modify them       ########


# Deprecated
# docker_version="20.10.6"

openstack="victoria"


###############################################
##
## Do not modify the below codes youself
## Create a issue if you need new features,
## or find a bug
##
###############################################
function get-token
{
  echo $(kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep kubernetes-client | awk '{print $1}') | grep "token:" | awk -F":" '{print$2}' | sed 's/ //g')
}

function get-arch()
{
  if [[ $(arch) == "x86_64" ]]
  then
    echo "amd64"
  elif [[ $(arch) == "aarch64" ]]
  then
    echo "arm64"
  else
    echo "only support x86_64(amd64) and aarch64(arm64)"
    exit 1
  fi
}

function get-ip()
{
  name=$(hostname | tr '[A-Z]' '[a-z]')
  echo $(kubectl get no $name -o yaml | grep "\- address:" | head -1 | awk -F":" '{print$2}' | sed  's/^[ \t]*//g')
}

function stop-service()
{
  for ser in "$@"
  do
    systemctl stop $ser
    systemctl disable $ser
  done 
}

function start-service()
{
  for ser in "$@"
  do
    systemctl start $ser
    systemctl enable $ser
  done 
}

###########################################################
##
##  init-env
##
##########################################################

function disable-centos-security()
{
  sed -ie 's/SELINUX=permissive/SELINUX=disabled/g' /etc/selinux/config
  sed -ie 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
  stop-service firewalld
}

function disable-ubuntu-security()
{
  sudo ufw disable
}

function add-yum-repository()
{
  echo -e "[docker-ce-stable]\nname=Docker CE Stable - \$basearch \nbaseurl=https://download.docker.com/linux/centos/\$releasever/\$basearch/stable\nenabled=1 \ngpgcheck=1 \ngpgkey=https://download.docker.com/linux/centos/gpg" > /etc/yum.repos.d/docker-ce.repo
  echo -e "[kubernetes] \nname=Kubernetes - \$basearch \nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-\$basearch/ \nenabled=1 \ngpgcheck=0 \nrepo_gpgcheck=0 \ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg" > /etc/yum.repos.d/kubernetes.repo
}


function add-apt-repository()
{
  arch=`get-arch`

  apt-get install apt-transport-https ca-certificates curl gnupg lsb-release lrzsz -y

  rm -rf /usr/share/keyrings/docker-archive-keyring.gpg
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  echo  "deb [arch=$arch signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  rm -rf /usr/share/keyrings/kubernetes-archive-keyring.gpg
  curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
  echo  "deb [arch=$arch signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null
}

function yum-docker-k8s()
{
  #yum install -y wget docker-ce-${docker_version} kubectl-${kube_version} kubelet-${kube_version} kubeadm-${kube_version}
  yum install -y wget docker-ce kubectl-${kube_version} kubelet-${kube_version} kubeadm-${kube_version}

  config-docker 
}

function apt-docker-k8s()
{
  #dVer=$(apt-cache madison docker-ce | grep $docker_version | awk -F"|" '{print$2}' | sed 's/ //g')
  kVer=$(apt-cache madison kubelet | grep $kube_version | awk -F"|" '{print$2}' | sed 's/ //g')
  apt-get update
  #apt-get install docker-ce=$dVer kubectl=$kVer kubelet=$kVer kubeadm=$kVer
  apt-get install docker-ce kubectl=$kVer kubelet=$kVer kubeadm=$kVer
  
  config-docker
}

function config-docker()
{
  ## kubernetes >= 1.22 only supports systemd
  mkdir -p /etc/docker
  echo "{" > /etc/docker/daemon.json
  echo "  \"exec-opts\": [\"native.cgroupdriver=systemd\"]" >> /etc/docker/daemon.json
  echo "}" >> /etc/docker/daemon.json
  systemctl daemon-reload

  start-service docker kubelet
}

function yum-containerd-k8s()
{

  yum install -y wget containerd.io kubectl-${kube_version} kubelet-${kube_version} kubeadm-${kube_version}
  
  config-containerd
}

function apt-containerd-k8s()
{

  kVer=$(apt-cache madison kubelet | grep $kube_version | awk -F"|" '{print$2}' | sed 's/ //g')
  apt-get update
  apt-get install containerd.io kubectl=$kVer kubelet=$kVer kubeadm=$kVer
  
  config-containerd
}


function config-containerd()
{
  echo "overlay" > /etc/modules-load.d/containerd.conf
  echo "br_netfilter" >> /etc/modules-load.d/containerd.conf
  
  modprobe overlay
  modprobe br_netfilter

  echo "net.bridge.bridge-nf-call-iptables  = 1" > /etc/sysctl.d/99-kubernetes-cri.conf
  echo "net.ipv4.ip_forward                 = 1" >> /etc/sysctl.d/99-kubernetes-cri.conf
  echo "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.d/99-kubernetes-cri.conf

  sysctl --system

  echo "KUBELET_EXTRA_ARGS=--cgroup-driver=systemd" > /etc/default/kubelet

  start-service containerd kubelet
}

function init-kubeadm-kubeconfig()
{
  if [[ ! -d "/etc/kubernetes" ]]
  then
    mkdir /etc/kubernetes
  fi
  echo -e "apiVersion: kubeadm.k8s.io/v1beta2" > /etc/kubernetes/kubeadm.yaml
  echo -e "kind: InitConfiguration" >> /etc/kubernetes/kubeadm.yaml
  echo -e "bootstrapTokens:" >> /etc/kubernetes/kubeadm.yaml
  echo -e "  - ttl: \"0\"" >> /etc/kubernetes/kubeadm.yaml
  if [[ $cnt_type = "containerd" ]]
  then
    echo -e "nodeRegistration:" >> /etc/kubernetes/kubeadm.yaml
    echo -e "  criSocket: /run/containerd/containerd.sock" >> /etc/kubernetes/kubeadm.yaml
  fi
  echo -e "---" >> /etc/kubernetes/kubeadm.yaml
  echo -e "apiVersion: kubeadm.k8s.io/v1beta2" >> /etc/kubernetes/kubeadm.yaml
  echo -e "kind: ClusterConfiguration" >> /etc/kubernetes/kubeadm.yaml
  if [[ -n $fip ]]
  then
  echo -e "controlPlaneEndpoint: \"$fip:6443\"" >> /etc/kubernetes/kubeadm.yaml
  fi
  echo -e "networking:" >> /etc/kubernetes/kubeadm.yaml
  echo -e "  podSubnet: \"${kube_pod_subnet}\"" >> /etc/kubernetes/kubeadm.yaml
  echo -e "kubernetesVersion: \"v${kube_version}\"" >> /etc/kubernetes/kubeadm.yaml
  echo -e "imageRepository: \"${kube_image_server}\"" >> /etc/kubernetes/kubeadm.yaml
}


yamlUrl="https://gitee.com/syswu/yamls/raw/master/"
plugins="collector/list"

function init-k8s-plugins()
{
   rm -rf /etc/kubernetes/kubeenv.list
   echo -e "$network" > /etc/kubernetes/kubeenv.list 
 
   array=(${plugins//,/ }) 
   for var in ${array[@]}
   do
     curl $yamlUrl$var > /tmp/list
     for line in `cat /tmp/list` 
     do 
       echo ${line} >> /etc/kubernetes/kubeenv.list
     done
   done
}

function init-env()
{
  if [[ -n $(cat /etc/os-release | grep centos) ]]
  then
    disable-centos-security
    add-yum-repository
    if [[ $cnt_type == "docker" ]]
    then
      yum-docker-k8s
    elif [[ $cnt_type == "containerd" ]]
    then
      yum-containerd-k8s
    else
      echo "only support docker and containerd"
      exit 1
    fi
  elif [[ -n $(cat /etc/os-release | grep ubuntu) ]]
  then
    disable-ubuntu-security
    add-apt-repository
    if [[ $cnt_type=="docker" ]]
    then
      apt-docker-k8s
    elif [[ $cnt_type=="containerd" ]]
    then
      apt-containerd-k8s
    else
      echo "only support docker and containerd"
      exit 1
    fi
  else
    echo "only support centos and ubuntu."
    exit 1
  fi
  init-kubeadm-kubeconfig
  init-k8s-plugins
}

###########################################################
##
##  init-kvm-env
##
##########################################################

function init-kvm-env()
{
  if [[ -n $(cat /etc/os-release | grep centos) ]]
  then
    disable-centos-security
    add-kvm-yum-repository
    yum install qemu-kvm libvirt libvirt-python virt-install virt-manager -y
  elif [[ -n $(cat /etc/os-release | grep ubuntu) ]]
  then
    disable-ubuntu-security
    add-kvm-apt-repository
    apt-get install qemu-kvm libvirt libvirt-python virt-install virt-manager -y
  else
    echo "only support centos and ubuntu."
    exit 1
  fi
  
  start-service libvirtd 
}

function add-kvm-yum-repository()
{
  yum install centos-release-openstack-$openstack lrzsz -y
}

function add-kvm-apt-repository
{
  add-apt-repository cloud-archive:$openstack
}


###########################################################
##
##  init-kube
##
##########################################################

function init-kube()
{
  // [optional] just consider performance
  swapoff -a      
  
  // [required] prerequires
  systemctl restart kubelet
  echo "1" > /proc/sys/net/bridge/bridge-nf-call-iptables
  echo "1" > /proc/sys/net/ipv4/ip_forward

  // [required], see https://kubernetes.io/docs/reference/config-api/kubeadm-config.v1beta2/
  kubeadm init --config /etc/kubernetes/kubeadm.yaml
  rm -rf $HOME/.kube
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  iptables -P FORWARD ACCEPT

  // [required] see https://github.com/projectcalico/cni-plugin/issues/749
  // mkdir -p /var/lib/cni/networks/k8s-pod-network
  while read line
  do
    kubectl apply -f $line
  done  < /etc/kubernetes/kubeenv.list

}

function reset-kube()
{
  kubeadm reset
}

###########################################################
##
##  kube-backend
##
##########################################################

backendUrl="https://gitee.com/syswu/yamls/raw/master/backend"
tokenFile="kube-token.yaml"
databaseFile="kube-database-postgres.yaml"
messageFile="kube-message-rabbitmq.yaml"
mirrorFile="kube-runtime-mirror.yaml"
mapperFile="kube-api-mapper.yaml"
dir="/opt/yamls"
type="postgres"

function config-dir()
{
   rm -rf $1
   mkdir -p $1
   chmod 777 $1
}

function apply-yaml()
{
  rm -rf $1/$2
  wget -P $1/$2 $3/$2
  kubectl apply -f $3/$2
}

function init-backend()
{

  config-dir $dir
  config-dir /var/lib/doslab/yamls
 
  apply-yaml $dir $tokenFile    $backendUrl
  apply-yaml $dir $databaseFile $backendUrl
  apply-yaml $dir $messageFile  $backendUrl

  rm -rf $backendUrl/$mirrorFile
  rm -rf $backendUrl/$mapperFile 
  wget -P /$dir/$mirror $backendUrl/$mirrorFile
  wget -P /$dir/$mapper $backendUrl/$mapperFile
  
  while true
  do
    res=$(kubectl get po -A | grep kube-database |  grep -v Running | grep -v NAMESPACE)
    if [[ -z "$res" ]]
    then
      break
    fi
    sleep 5s
  done
  
  token=`get-token`


  ## arch
  arch=`get-arch`

  # host and url
  host=`get-ip`
  url="https:\/\/"$host":6443"

  #@ port
  dbport="30306"
  mqport="30304"

  sed -i "s/#type#/$type/g" $dir/$mirrorFile
  sed -i "s/#host#/$host/g" $dir/$mirrorFile
  sed -i "s/#ahost#/$host/g" $dir/$mirrorFile
  sed -i "s/#port#/$dbport/g" $dir/$mirrorFile
  sed -i "s/#aport#/$mqport/g" $dir/$mirrorFile
  sed -i "s/#url#/$url/g" $dir/$mirrorFile
  sed -i "s/#token#/$token/g" $dir/$mirrorFile
  sed -i "s/#version#/$kube_backend_version/g" $dir/$mirrorFile
  sed -i "s/#arch#/$arch/g" $dir/$mirrorFile

  sed -i "s/#type#/$type/g" $dir/$mapperFile
  sed -i "s/#host#/$host/g" $dir/$mapperFile
  sed -i "s/#port#/$port/g" $dir/$mapperFile
  sed -i "s/#url#/$url/g" $dir/$mapperFile
  sed -i "s/#token#/$token/g" $dir/$mapperFile
  sed -i "s/#version#/$kube_backend_version/g" $dir/$mapperFile
  sed -i "s/#arch#/$arch/g" $dir/$mapperFile

  kubectl apply -f $dir/$mirrorFile
  kubectl apply -f $dir/$mapperFile
}

function reset-backend()
{
  kubectl delete deploy kube-runtime-mirror -n kube-system
  kubectl delete deploy kube-api-mapper -n kube-system
  kubectl delete svc kube-api-mapper -n kube-system
}

###########################################################
##
##  kube-frontend
##
##########################################################

frontendUrl="https://gitee.com/syswu/yamls/raw/master/frontend"
config_dir="/var/lib/doslab/frontend"
config_name="config.js"
frontendFile="kube-frontend.yaml"

function init-frontend()
{
  init-frontend-prerequire
  init-frontend-yaml
}

function init-frontend-prerequire()
{
   rm -rf /tmp/list
   wget -P /tmp/ $frontendUrl/list
   
   for name in `cat /tmp/list`
   do
     kubectl apply -f $name
   done
   
   rm -rf /tmp/user-1001-admin.json
   wget -P /tmp/ $frontendUrl/users/user-1001-admin.json
   
   token=$(kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep kubernetes-client | awk '{print $1}') | grep "token:" | awk -F":" '{print$2}' | sed 's/ //g')
   sed -i "s/#token#/$token/g" /tmp/user-1001-admin.json
   
   kubectl apply -f /tmp/user-1001-admin.json
}

function init-frontend-yaml()
{
  // make and config config.js 
  rm -rf $config_dir
  mkdir -p $config_dir
  echo "window.g = {" > $config_dir/$config_name
  if [[ -n $fip ]]
  then
    echo "    baseURL: 'http://$fip:30308/kubesys'" >> $config_dir/$config_name
  else
    echo "    baseURL: 'http://`get-ip`:30308/kubesys'" >> $config_dir/$config_name
  fi
  echo "}" >> $config_dir/$config_name
  
  // make and config yaml
  rm -rf /$dir/$frontendFile 
  wget -P $dir/ $frontendUrl/$frontendFile
  sed -i "s/#arch#/`get-arch`/g" $dir/$frontendFile
  sed -i "s/#version#/$kube_frontend_version/g" $dir/$frontendFile

  // apply yaml
  kubectl apply -f /$dir/$frontendFile
}


function reset-frontend()
{
  kubectl delete deploy kube-frontend -n kube-system
  kubectl delete svc kube-frontend -n kube-system
}

###########################################################
##
##  help
##
##########################################################


function cmddesc()
{
  echo -e "Welcome to kubeinst ($VERSION), install Kubernetes-based systems from scratch.\n"
}


function help()
{
  cmddesc
  echo -e "Commands:"
  echo -e "  init-env             :\t(Init): simplify configuring node, such as disable selinux, install docker"
  echo -e "  init-kube            :\t(Init): deploy Kubernetes as your want by editing /etc/kubernetes/kubeenv.list. Now it includes calico, prometheus, grafna"
  echo -e "  init-backend         :\t(Init): install backend services, see project https://github.com/kubesys/kube-backend"
  echo -e "  init-frontend        :\t(Init): install Kuberetes-based dashboard, includes all crd and jsons, see project https://github.com/kubesys/kube-frontend"
  echo -e "  init-frontend-simple :\t(Init): install Kuberetes-based dashboard without crd and jsons, see project https://github.com/kubesys/kube-frontend"
  echo -e "  init-kvm-env         :\t(Init): install kvm and libvirt"
  echo -e "  reset-kube           :\t(Init): uninstall Kubernetes"
  echo -e "  reset-backend        :\t(Init): just uninstall deployment and svc"
  echo -e "  reset-frontend       :\t(Init): just uninstall deployment and svc"
}


case $1 in
  "init-env")
    init-env $*
    ;;
  "init-kube")
    init-kube $*
    ;;
  "init-backend")
    init-backend $*
    ;;
  "init-frontend")
    init-frontend $*
    ;;
  "init-frontend-simple")
    init-frontend-yaml $*
    ;;
  "init-kvm-env")
    init-kvm-env $*
    ;;
  "reset-kube")
    reset-kube $*
    ;;
  "reset-backend")
    reset-backend $*
    ;;
  "reset-frontend")
    reset-frontend $*
    ;;
  "--help")
    help
    ;;
  *)
  help
  ;;
esac
