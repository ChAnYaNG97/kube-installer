#! /bin/bash
###############################################
##
##  Copyright (2020, ) Institute of Software
##      Chinese Academy of Sciences
##          wuheng@iscas.ac.cn
##
###############################################


VERSION="1.0"

# Prod
kube_pod_subnet="10.244.0.0/16"
docker_version="20.10.6"
kube_version="1.20.6"
kube_image_server="registry.cn-hangzhou.aliyuncs.com/google_containers"

# Dev
ovn_version="v1.6.2"
iface_name="eth0"


###########################################################
##
##  init-env
##
##########################################################

function disable-centos-security()
{
  sed -ie 's/SELINUX=permissive/SELINUX=disabled/g' /etc/selinux/config
  sed -ie 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
  systemctl stop firewalld
  systemctl disable firewalld
}


function add-yum-repository()
{
  echo -e "[docker-ce-stable]\nname=Docker CE Stable - \$basearch \nbaseurl=https://download.docker.com/linux/centos/7/\$basearch/stable\nenabled=1 \ngpgcheck=1 \ngpgkey=https://download.docker.com/linux/centos/gpg" > /etc/yum.repos.d/docker-ce.repo
  echo -e "[kubernetes] \nname=Kubernetes - \$basearch \nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-\$basearch/ \nenabled=1 \ngpgcheck=0 \nrepo_gpgcheck=0 \ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg" > /etc/yum.repos.d/kubernetes.repo
  yum install centos-release-openstack-rocky -y
}

function disable-ubuntu-security()
{
  sudo ufw disable
}

function add-apt-repository()
{
  apt-get install apt-transport-https ca-certificates curl gnupg lsb-release lrzsz -y

  rm -rf /usr/share/keyrings/docker-archive-keyring.gpg
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  echo  "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  rm -rf /usr/share/keyrings/kubernetes-archive-keyring.gpg
  curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
  echo  "deb [arch=arm64 signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null
}

function init-docker-k8s()
{
  yum install -y wget docker-ce-${docker_version} kubectl-${kube_version} kubelet-${kube_version} kubeadm-${kube_version}
  systemctl start docker
  systemctl enable docker
  systemctl enable kubelet
}


function init-kubeadm-kubeconfig()
{
  if [[ ! -d "/etc/kubernetes" ]]
  then
    mkdir /etc/kubernetes
  fi
  echo -e "apiVersion: kubeadm.k8s.io/v1beta2" > /etc/kubernetes/kubeadm.yaml
  echo -e "kind: InitConfiguration" >> /etc/kubernetes/kubeadm.yaml
  echo -e "bootstrapTokens:" >> /etc/kubernetes/kubeadm.yaml
  echo -e "  - ttl: \"0\"" >> /etc/kubernetes/kubeadm.yaml
  echo -e "---" >> /etc/kubernetes/kubeadm.yaml
  echo -e "apiVersion: kubeadm.k8s.io/v1beta2" >> /etc/kubernetes/kubeadm.yaml
  echo -e "kind: ClusterConfiguration" >> /etc/kubernetes/kubeadm.yaml
  echo -e "networking:" >> /etc/kubernetes/kubeadm.yaml
  echo -e "  podSubnet: \"${kube_pod_subnet}\"" >> /etc/kubernetes/kubeadm.yaml
  echo -e "kubernetesVersion: \"v${kube_version}\"" >> /etc/kubernetes/kubeadm.yaml
  echo -e "imageRepository: \"${kube_image_server}\"" >> /etc/kubernetes/kubeadm.yaml
}

function init-k8s-plugins()
{
   echo -e "https://docs.projectcalico.org/archive/v3.19/manifests/calico.yaml" > /etc/kubernetes/kubeenv.list
#  echo -e "https://raw.githubusercontent.com/kubesys/kubernetes-installer/master/prom/exportor.yaml" >> /etc/kubernetes/kubeenv.list
#  echo -e "https://raw.githubusercontent.com/kubesys/kubernetes-installer/master/prom/grafana-dashboards-configmaps.yaml" >> /etc/kubernetes/kubeenv.list
#  echo -e "https://raw.githubusercontent.com/kubesys/kubernetes-installer/master/prom/grafana-datasources-configmaps.yaml" >> /etc/kubernetes/kubeenv.list
#  echo -e "https://raw.githubusercontent.com/kubesys/kubernetes-installer/master/prom/grafana.yaml" >> /etc/kubernetes/kubeenv.list
#  echo -e "https://raw.githubusercontent.com/kubesys/kubernetes-installer/master/prom/loki.yaml" >> /etc/kubernetes/kubeenv.list
#  echo -e "https://raw.githubusercontent.com/kubesys/kubernetes-installer/master/prom/prometheus.yaml" >> /etc/kubernetes/kubeenv.list
}

function init-env()
{
  if [[ -n $(cat /etc/os-release | grep centos) ]]
  then
    disable-centos-security
    add-yum-repository
  elif [[ -n $(cat /etc/os-release | grep ubuntu) ]]
  then
    disable-ubuntu-security
    add-apt-repository
  else
    echo "only support centos and ubuntu."
    exit 1
  fi
  init-docker-k8s
  init-kubeadm-kubeconfig
  init-k8s-plugins
}

###########################################################
##
##  Experimental
##
##########################################################

function init-env-exp()
{
  init-env-disable-selinux
  init-env-disable-firewalld
  init-env-repository
  if [[ -z $2 ]]
  then
    init-containerd-software
  elif [[ $2 == "docker" ]]
  then
    init-docker-software
  elif [[ $2 == "containerd" ]]
  then
    init-containerd-software
  else
    echo "only support docker or containerd"
    exit 1
  fi
  init-env-kubeconfig
  init-env-kubecomp
}

function init-containerd-software()
{
  yum install -y wget containerd.io kubeadm-${kube_version} kubectl-${kube_version} kubelet-${kube_version}

  echo "overlay" > /etc/modules-load.d/containerd.conf
  echo "br_netfilter" >> /etc/modules-load.d/containerd.conf

  modprobe overlay
  modprobe br_netfilter

  echo "net.bridge.bridge-nf-call-iptables  = 1" > /etc/sysctl.d/99-kubernetes-cri.conf
  echo "net.ipv4.ip_forward                 = 1" >> /etc/sysctl.d/99-kubernetes-cri.conf
  echo "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.d/99-kubernetes-cri.conf

  sysctl --system

  containerd config default > /etc/containerd/config.toml

  sed -i 's/k8s.gcr.io\/pause:3.2/registry.cn-hangzhou.aliyuncs.com\/google_containers\/pause:3.2/g' /etc/containerd/config.toml

  systemctl start containerd
  systemctl enable containerd

  echo "KUBELET_EXTRA_ARGS=--cgroup-driver=systemd" > /etc/default/kubelet

  echo "runtime-endpoint: unix:///run/containerd/containerd.sock" > /etc/crictl.yaml
  echo "image-endpoint: unix:///run/containerd/containerd.sock" >> /etc/crictl.yaml
  echo "timeout: 10" >> /etc/crictl.yaml
  echo "debug: false" >> /etc/crictl.yaml

  systemctl enable kubelet

}

###########################################################
##
##  init-kube
##
##########################################################

function init-kube()
{
  systemctl restart kubelet

  swapoff -a
  echo "1" > /proc/sys/net/bridge/bridge-nf-call-iptables
  echo "1" > /proc/sys/net/ipv4/ip_forward

  kubeadm init --config /etc/kubernetes/kubeadm.yaml

  rm -rf $HOME/.kube
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  iptables -P FORWARD ACCEPT

  while read line
  do
    kubectl apply -f $line
  done  < /etc/kubernetes/kubeenv.list

}

###########################################################
##
##  help
##
##########################################################

function cmddesc()
{
  echo -e "Welcome to kubeinst ($VERSION), install Kubernetes-based systems from scratch.\n"
}


function help()
{
  cmddesc
  echo -e "Commands:"
  echo -e "  init-env       :\t(Init): simplify configuring node, such as disable selinux, install docker"
  echo -e "  init-kube      :\t(Init): deploy Kubernetes as your want by editing /etc/kubernetes/kubeenv.list. Now it includes calico, prometheus, grafna"
}


case $1 in
  "init-env")
    init-env $*
    ;;
  "init-kube")
    init-kube $*
    ;;
  "--help")
    help
    ;;
  *)
  help
  ;;
esac
